menu "Lego Memory Component Configurations"

config COMP_MEMORY
	bool "Configure Lego as memory component manager"
	default n
	---help---
	  Say Y if you are going to build a memory-component
	  controller of Lego OS.

if COMP_MEMORY

config MEM_PREFETCH
	bool "Use Prefetch for handle file backed page fault"
	default n
	help
	  Enable to prefetch pages from storage for page fault

config THPOOL_NR_WORKERS
	int "Thread pool: number of workers"
	range 1 16
	default 1
	help
	  Determines how many workers threads memory manager has.
	  Each worker thread is pinned a CPU core. So, it should
	  be smaller than number of cores.

menu "Memory Side Replication Configuration"
config REPLICATION_VMA
	bool "Enable replicating VMA"
	default n
	help
	  Enable this if you want to replica VMA info to Storage.
	  The VMA info is directly sent by Primary Memory Node
	  to Storage. It is not sent to Seconadry Memory Node.
	  Processor will send replicated memory to Secondary Memory Node.

	  This is independent of Processor side REPLICATION_MEMORY.

	  If you want to be able to recover from memory component failure,
	  you should have both enabled at P and M.

	  If unsure, say N

config REPLICATION_MEMORY_BATCH_NR
	int "Number of memory logs to be batch flushed to storage."
	range 16 500
	default 256
	help
	  Number of logs to form a batch flush.
	  This is used by Secondary Memory.
	  The upperlimit depends on FIT maximum message size;

endmenu

menu "Memory Side DEBUG Options"
config DEBUG_HANDLE_PCACHE
	bool "Debug pcache"
	default n
	depends on COMP_MEMORY
	depends on DEBUG_KERNEL
	help
	  Enable to debug pcache filling. You must enable DEBUG_PCACHE
	  at processor too.

	  If unsure, say N.

config DEBUG_HANDLE_PCACHE_FILL
	bool "Debug pcache handling"
	default n
	depends on COMP_MEMORY
	depends on DEBUG_KERNEL
	depends on DEBUG_HANDLE_PCACHE
	help
	  Enable to have a detailed dump log of pcache llc miss activities.
	  It basically tells you what lines are fetched from remote. This
	  option may produce *a lot* messages.

	  If unsure, say N

config DEBUG_HANDLE_PCACHE_FLUSH
	bool "Debug pcache flush"
	default n
	depends on COMP_MEMORY
	depends on DEBUG_KERNEL
	depends on DEBUG_HANDLE_PCACHE
	help
	  Enable to have a detailed dump log of pcache flush activities.
	  It basically tells you what lines are flushed, and where they
	  flushed to.

	  If unsure, say N

config DEBUG_HANDLE_REPLICA
	bool "Debug replication handling"
	default n
	depends on COMP_MEMORY
	depends on DEBUG_KERNEL
	help
	  Enable to debug handle_replica part.
	  Replication is triggered by clflush.

	  If unsure, say N.

config DEBUG_HANDLE_ZEROFILL
	bool "Debug pcache zerofill"
	default n
	depends on COMP_MEMORY
	depends on DEBUG_KERNEL

config DEBUG_HANDLE_FORK
	bool "Debug handle_fork.c"
	default n
	depends on COMP_MEMORY
	depends on DEBUG_KERNEL
	help
	  Enable to have a detailed log of what memory-manager's fork handler has did.

	  If unsure, say N.

config DEBUG_HANDLE_EXECVE
	bool "Debug handle_execve.c"
	default n
	depends on COMP_MEMORY
	depends on DEBUG_KERNEL
	help
	  Enable to have a detailed dump of mmap after execve() call.

	  If unsure, say N.

config DEBUG_LOADER
	bool "Debug elf loader"
	default n
	depends on COMP_MEMORY
	depends on DEBUG_KERNEL
	depends on DEBUG_HANDLE_EXECVE
	help
	  Enable to debug our virtual loader and elf loader.
	  It will print some important information about loading.

	  If unsrue, say N.

config DEBUG_HANDLE_MMAP
	bool "Debug handle_mmap.c"
	default n
	depends on COMP_MEMORY
	depends on DEBUG_KERNEL
	help
	  Enable to debug mmap(), munmap(), brk() related syscalls.

	  If unsure, say N.

config DEBUG_HANDLE_FILE
	bool "Debug handle_file.c"
	default n
	depends on COMP_MEMORY
	depends on DEBUG_KERNEL
	help
	  Enable to debug handle_file.c
	  Handlers for read(), write() syscalls.

	  If unsure, say N.

config DEBUG_M2S_READ_WRITE
	bool "Debug m2s_read_write.c"
	default n
	depends on COMP_MEMORY
	depends on DEBUG_KERNEL
	help
	  Enable to debug all interactions between memory and storage
	  components. Mostly, m2s_read_write.c

	  If unsure, say N.

config DEBUG_VM
	bool "Debug Memory Manager's VM subsystem"
	default n
	depends on COMP_MEMORY
	depends on DEBUG_KERNEL
	help
	  Enable to debug memory manager VM subsystem. This is a high-level
	  control option. It controls several other debug options.

	  If unsure, say N.

config DEBUG_VM_UACCESS
	bool "Debug uaccess family"
	default n
	depends on COMP_MEMORY
	depends on DEBUG_KERNEL
	depends on DEBUG_VM
	help
	  Enable to debug uaccess family functions, e.g., lego_copy_to_user.
	  It will print the destination address, or source address.

	  If unsure, say N.

config DEBUG_VM_RB
	bool "Debug VM red-black trees"
	default n
	depends on COMP_MEMORY
	depends on DEBUG_KERNEL
	depends on DEBUG_VM
	help
	  Enable VM red-black tree debugging information and extra validations.

	  If unsure, say N.

endmenu # Memory DEBUG Options

if MEM_PAGE_CACHE
config DEBUG_PAGE_CACHE
	bool "Bebug page cache operations"
	default n
	help
	  Enable to debug all memory/pgcache files

	  If unsure say N.
endif # MEM_PAGE_CACHE

config GMM
	bool "Global memory monitor"
	default n
	help
	  Enable this to use Global memory monitor

if GMM
config GMM_NODEID
	int "GMM IB node ID"
	default 3
	help
	  if running a multiple monitor on same machine, IB node
	  ID can be same as Storage node, GPM and GSM's

endif #if GMM

endif # if COMP_MEMORY

endmenu
